================================================================================
  CUSTOMER LOCATION INTEGRATION - VISUAL GUIDE
================================================================================

FILE: app/checkout/page.tsx

================================================================================
CHANGE #1 - Add Import (Top of File)
================================================================================

FIND THIS (around line 18-19):
───────────────────────────────────────────────────────────────────────────
import { FirstOrderCouponBanner } from '@/components/ui/coupon-display';
import { toast } from 'sonner';
───────────────────────────────────────────────────────────────────────────

ADD THIS LINE AFTER IT:
───────────────────────────────────────────────────────────────────────────
import CustomerLocationCapture from '@/components/checkout/CustomerLocationCapture';
───────────────────────────────────────────────────────────────────────────

RESULT:
───────────────────────────────────────────────────────────────────────────
import { FirstOrderCouponBanner } from '@/components/ui/coupon-display';
import { toast } from 'sonner';
import CustomerLocationCapture from '@/components/checkout/CustomerLocationCapture';  ✅
───────────────────────────────────────────────────────────────────────────


================================================================================
CHANGE #2 - Add State Variable (around line 68)
================================================================================

FIND THIS:
───────────────────────────────────────────────────────────────────────────
const [paymentMethod, setPaymentMethod] = useState('cod');
const [errors, setErrors] = useState<{[key: string]: string}>({});
const [pendingStripe, setPendingStripe] = useState(false);
───────────────────────────────────────────────────────────────────────────

ADD THIS LINE AFTER IT:
───────────────────────────────────────────────────────────────────────────
const [customerLocation, setCustomerLocation] = useState<any>(null);
───────────────────────────────────────────────────────────────────────────

RESULT:
───────────────────────────────────────────────────────────────────────────
const [paymentMethod, setPaymentMethod] = useState('cod');
const [errors, setErrors] = useState<{[key: string]: string}>({});
const [pendingStripe, setPendingStripe] = useState(false);
const [customerLocation, setCustomerLocation] = useState<any>(null);  ✅
───────────────────────────────────────────────────────────────────────────


================================================================================
CHANGE #3 - Add Component to Form (around line 873-888)
================================================================================

FIND THIS SECTION (Delivery Information Step):
───────────────────────────────────────────────────────────────────────────
{/* Delivery Information */}
{currentStep === 2 && (
  <Card className="p-6">
    <div className="flex items-center space-x-2 mb-6">
      <Truck className="h-5 w-5 text-emerald-600" />
      <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
        Delivery Information
      </h2>
    </div>

    <div className="space-y-4">
      <div>
        <Label htmlFor="address">Street Address</Label>
        <Input
          id="address"
          value={deliveryInfo.address}
          onChange={(e) => setDeliveryInfo({...deliveryInfo, address: e.target.value})}
          placeholder="123 Main Street"
          required
        />
      </div>
      
      ⬇️ ADD LOCATION COMPONENT HERE ⬇️
      
      <div>
        <Label htmlFor="city">City</Label>
        ...
───────────────────────────────────────────────────────────────────────────

ADD THIS BLOCK (after the address </div> and before city <div>):
───────────────────────────────────────────────────────────────────────────
      {/* Customer Location Capture */}
      <div className="mt-4">
        <CustomerLocationCapture 
          onLocationCaptured={(location) => {
            setCustomerLocation(location);
            console.log('📍 Location captured:', location);
            
            if (!location.isWithinRange) {
              toast.warning(
                `⚠️ Outside delivery range: ${location.distance.toFixed(2)}km (Max: 3km)`,
                { duration: 5000 }
              );
            } else {
              toast.success(
                `✅ Location verified: ${location.distance.toFixed(2)}km from store`,
                { duration: 3000 }
              );
            }
          }}
          autoCapture={true}
        />
      </div>
───────────────────────────────────────────────────────────────────────────

RESULT SHOULD LOOK LIKE:
───────────────────────────────────────────────────────────────────────────
      <div>
        <Label htmlFor="address">Street Address</Label>
        <Input ... />
      </div>

      {/* Customer Location Capture */}  ✅ NEW
      <div className="mt-4">                ✅ NEW
        <CustomerLocationCapture           ✅ NEW
          onLocationCaptured={...}          ✅ NEW
          autoCapture={true}                ✅ NEW
        />                                  ✅ NEW
      </div>                                ✅ NEW

      <div>
        <Label htmlFor="city">City</Label>
        ...
───────────────────────────────────────────────────────────────────────────


================================================================================
CHANGE #4 - Include Location in Order Data
================================================================================

FIND the `handlePlaceOrder` function where `orderData` is created.

FIND THIS SECTION (around line 250-280):
───────────────────────────────────────────────────────────────────────────
const orderData = {
  user_id: user?.id || null,
  customer_name: `${customerInfo.firstName} ${customerInfo.lastName}`.trim(),
  customer_email: customerInfo.email,
  customer_phone: customerInfo.phone,
  items: cartState.items.map(item => ({
    product: item.product,
    quantity: item.quantity
  })),
  subtotal: cartState.total,
  discount: totalDiscount,
  delivery_fee: deliveryFee,
  tax: tax,
  total: total,
  status: 'pending',
  payment_method: paymentMethod,
  delivery_address: {
    address: deliveryInfo.address,
    city: deliveryInfo.city,
    state: deliveryInfo.state,
    zipCode: deliveryInfo.zipCode,
    instructions: deliveryInfo.instructions
  },
};
───────────────────────────────────────────────────────────────────────────

ADD THIS LINE (after delivery_address, before the closing }):
───────────────────────────────────────────────────────────────────────────
  customer_location: customerLocation,
───────────────────────────────────────────────────────────────────────────

RESULT SHOULD LOOK LIKE:
───────────────────────────────────────────────────────────────────────────
const orderData = {
  user_id: user?.id || null,
  customer_name: `${customerInfo.firstName} ${customerInfo.lastName}`.trim(),
  customer_email: customerInfo.email,
  customer_phone: customerInfo.phone,
  items: cartState.items.map(item => ({
    product: item.product,
    quantity: item.quantity
  })),
  subtotal: cartState.total,
  discount: totalDiscount,
  delivery_fee: deliveryFee,
  tax: tax,
  total: total,
  status: 'pending',
  payment_method: paymentMethod,
  delivery_address: {
    address: deliveryInfo.address,
    city: deliveryInfo.city,
    state: deliveryInfo.state,
    zipCode: deliveryInfo.zipCode,
    instructions: deliveryInfo.instructions
  },
  customer_location: customerLocation,  ✅ ADD THIS LINE
};
───────────────────────────────────────────────────────────────────────────


================================================================================
SUMMARY OF CHANGES
================================================================================

Total Lines to Add: 4 sections

1. ✅ Import statement (1 line)
2. ✅ State variable (1 line)  
3. ✅ Location component (15 lines)
4. ✅ Include in order data (1 line)

Total: ~18 lines of code to add!

================================================================================
TEST CHECKLIST
================================================================================

After making changes:

[ ] Save the file
[ ] Check for any TypeScript errors
[ ] Run: npm run dev
[ ] Visit: http://localhost:3000/checkout
[ ] Add items to cart first
[ ] Go through checkout
[ ] See location capture component
[ ] Allow location when browser asks
[ ] See success toast: "Location verified"
[ ] Complete the order
[ ] Go to /admin
[ ] Check Orders tab
[ ] See GPS Location section
[ ] Click "Open in Google Maps"
[ ] Verify it shows correct location

================================================================================
WHAT YOU'LL SEE IN ADMIN DASHBOARD
================================================================================

For each order, you'll see:

┌────────────────────────────────────────┐
│ 📍 GPS Location          1.50km ✓     │
│ ────────────────────────────────────── │
│ Lat: 17.390000°                        │
│ Lng: 78.490000°                        │
│ Accuracy: ±50m                         │
│ 🗺️ Open in Google Maps                 │
└────────────────────────────────────────┘

Click the Google Maps link to see the exact customer location!

================================================================================
DONE!
================================================================================

You now have automatic customer location detection integrated into your
checkout page, storing GPS data with each order, and displaying it in the
admin dashboard with a direct link to Google Maps!

Need help? Check MANUAL_INTEGRATION_STEPS.md for detailed explanations.

================================================================================


